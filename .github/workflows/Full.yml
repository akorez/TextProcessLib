name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  cleanup-artifact:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: always()
    steps:
      - name: Delete artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_NAME="coverage-report"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          WORKFLOW_RUN_ID="${{ github.run_id }}"
          ARTIFACTS_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/runs/$WORKFLOW_RUN_ID/artifacts"
          ARTIFACT_ID=$(curl -H "Authorization: token $GITHUB_TOKEN" $ARTIFACTS_URL | jq --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name==$NAME) | .id')
          if [ "$ARTIFACT_ID" != "" ]; then
            DELETE_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/artifacts/$ARTIFACT_ID"
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" $DELETE_URL
          else
            echo "Artifact $ARTIFACT_NAME not found"
          fi

  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/**/coverage.cobertura.xml

  test-coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3

    - name: Download coverage report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: coverage

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'coverage/**/coverage.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Write to Job Summary
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
